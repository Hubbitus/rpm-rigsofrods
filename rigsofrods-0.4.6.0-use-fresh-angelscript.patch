Binary files rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/bin/libangelscript_addons_d.a and rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/bin/libangelscript_addons_d.a differ
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/bin/plugins.cfg rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/bin/plugins.cfg
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/bin/plugins.cfg	1970-01-01 03:00:00.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/bin/plugins.cfg	2016-01-09 14:03:07.594180945 +0300
@@ -0,0 +1,14 @@
+# Defines plugins to load
+
+# Define plugin folder
+PluginFolder=/usr/local/lib/OGRE/
+
+# Define plugins
+Plugin=RenderSystem_GL
+Plugin=RenderSystem_GL3Plus
+Plugin=Plugin_ParticleFX
+Plugin=Plugin_OctreeSceneManager
+Plugin=Plugin_CgProgramManager
+Plugin=libCaelum.so
+
+
Binary files rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/bin/RoR and rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/bin/RoR differ
Binary files rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/bin/RoRConfig and rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/bin/RoRConfig differ
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/contextmgr/contextmgr.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/contextmgr/contextmgr.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/contextmgr/contextmgr.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/contextmgr/contextmgr.cpp	2016-01-09 01:15:04.362718081 +0300
@@ -65,8 +65,8 @@
 
 		// We need to find the function that will be created as the co-routine
 		string decl = "void " + func + "(any @)";
-		int funcId = engine->GetModule(mod.c_str())->GetFunctionIdByDecl(decl.c_str());
-		if( funcId < 0 )
+		asIScriptFunction *func = engine->GetModule(mod.c_str())->GetFunctionByDecl(decl.c_str());
+		if( !func )
 		{
 			// No function could be found, raise an exception
 			ctx->SetException(("Function '" + decl + "' doesn't exist").c_str());
@@ -74,7 +74,7 @@
 		}
 
 		// Create a new context for the co-routine
-		asIScriptContext *coctx = g_ctxMgr->AddContextForCoRoutine(ctx, funcId);
+		asIScriptContext *coctx = g_ctxMgr->AddContextForCoRoutine(ctx, func);
 
 		// Pass the argument to the context
 		coctx->SetArgObject(0, arg);
@@ -236,7 +236,7 @@
 	m_currentThread = 0;
 }
 
-asIScriptContext *CContextMgr::AddContext(asIScriptEngine *engine, int funcId)
+asIScriptContext *CContextMgr::AddContext(asIScriptEngine *engine, asIScriptFunction *func)
 {
 	// Create the new context
 	asIScriptContext *ctx = engine->CreateContext();
@@ -244,7 +244,7 @@
 		return 0;
 
 	// Prepare it to execute the function
-	int r = ctx->Prepare(funcId);
+	int r = ctx->Prepare(func);
 	if( r < 0 )
 	{
 		ctx->Release();
@@ -271,7 +271,7 @@
 	return ctx;
 }
 
-asIScriptContext *CContextMgr::AddContextForCoRoutine(asIScriptContext *currCtx, int funcId)
+asIScriptContext *CContextMgr::AddContextForCoRoutine(asIScriptContext *currCtx, asIScriptFunction *func)
 {
 	asIScriptEngine *engine = currCtx->GetEngine();
 	asIScriptContext *coctx = engine->CreateContext();
@@ -281,7 +281,7 @@
 	}
 
 	// Prepare the context
-	int r = coctx->Prepare(funcId);
+	int r = coctx->Prepare(func);
 	if( r < 0 )
 	{
 		// Couldn't prepare the context
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/contextmgr/contextmgr.h rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/contextmgr/contextmgr.h
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/contextmgr/contextmgr.h	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/contextmgr/contextmgr.h	2016-01-09 01:15:04.362718081 +0300
@@ -46,12 +46,12 @@
 	// Create a new context, prepare it with the function id, then return
 	// it so that the application can pass the argument values. The context
 	// will be released by the manager after the execution has completed.
-    asIScriptContext *AddContext(asIScriptEngine *engine, int funcId);
+    asIScriptContext *AddContext(asIScriptEngine *engine, asIScriptFunction *func);
 
 	// Create a new context, prepare it with the function id, then return
 	// it so that the application can pass the argument values. The context
 	// will be added as a co-routine in the same thread as the currCtx.
-	asIScriptContext *AddContextForCoRoutine(asIScriptContext *currCtx, int funcId);
+	asIScriptContext *AddContextForCoRoutine(asIScriptContext *currCtx, asIScriptFunction *func);
 
 	// Execute each script that is not currently sleeping. The function returns after
 	// each script has been executed once. The application should call this function
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/debugger/debugger.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/debugger/debugger.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/debugger/debugger.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/debugger/debugger.cpp	2016-01-09 01:15:04.362718081 +0300
@@ -405,7 +405,7 @@
 {
 	asIScriptEngine *engine = ctx->GetEngine();
 
-	int len;
+	AngelScript::asUINT len;
 	asETokenClass t = engine->ParseToken(expr.c_str(), 0, &len);
 
 	// TODO: If the expression starts with :: we should only look for global variables
@@ -447,7 +447,7 @@
 					const char *propName = 0;
 					int offset = 0;
 					bool isReference = 0;
-					type->GetProperty(n, &propName, &typeId, 0, &offset, &isReference);
+					type->GetProperty(n, &propName, &typeId, 0, 0, &offset, &isReference);
 					if( name == propName )
 					{
 						ptr = (void*)(((asBYTE*)ctx->GetThisPointer())+offset);
@@ -466,8 +466,8 @@
 			{
 				for( asUINT n = 0; n < mod->GetGlobalVarCount(); n++ )
 				{
-					const char *varName = 0;
-					mod->GetGlobalVar(n, &varName, &typeId);
+					const char *varName = 0, *nameSpace = 0;
+					mod->GetGlobalVar(n, &varName, &nameSpace, &typeId);
 					if( name == varName )
 					{
 						ptr = mod->GetAddressOfGlobalVar(n);
@@ -542,7 +542,7 @@
 	for( asUINT n = 0; n < mod->GetGlobalVarCount(); n++ )
 	{
 		int typeId;
-		mod->GetGlobalVar(n, 0, &typeId);
+		mod->GetGlobalVar(n, 0, 0, &typeId);
 		s << mod->GetGlobalVarDeclaration(n) << " = " << ToString(mod->GetAddressOfGlobalVar(n), typeId, false, ctx->GetEngine()) << endl;
 	}
 	Output(s.str());
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptany/scriptany.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptany/scriptany.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptany/scriptany.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptany/scriptany.cpp	2016-01-09 01:15:04.363718071 +0300
@@ -1,8 +1,10 @@
-#include "scriptany.h"
 #include <new>
 #include <assert.h>
 #include <string.h>
 
+#define AS_DEPRECATED true
+#include "scriptany.h"
+
 BEGIN_AS_NAMESPACE
 
 // We'll use the generic interface for the factories as we need the engine pointer
@@ -197,9 +199,10 @@
 CScriptAny &CScriptAny::operator=(const CScriptAny &other)
 {
 	// Hold on to the object type reference so it isn't destroyed too early
+	asIObjectType *ot = 0;
 	if( other.value.valueObj && (other.value.typeId & asTYPEID_MASK_OBJECT) )
 	{
-		asIObjectType *ot = engine->GetObjectTypeById(other.value.typeId);
+		ot = engine->GetObjectTypeById(other.value.typeId);
 		if( ot )
 			ot->AddRef();
 	}
@@ -207,16 +210,16 @@
 	FreeObject();
 
 	value.typeId = other.value.typeId;
-	if( value.typeId & asTYPEID_OBJHANDLE )
+	if( value.typeId & asTYPEID_OBJHANDLE)
 	{
 		// For handles, copy the pointer and increment the reference count
 		value.valueObj = other.value.valueObj;
-		engine->AddRefScriptObject(value.valueObj, value.typeId);
+		engine->AddRefScriptObject(value.valueObj, ot);
 	}
 	else if( value.typeId & asTYPEID_MASK_OBJECT )
 	{
 		// Create a copy of the object
-		value.valueObj = engine->CreateScriptObjectCopy(other.value.valueObj, value.typeId);
+		value.valueObj = engine->CreateScriptObjectCopy(other.value.valueObj, ot);
 	}
 	else
 	{
@@ -245,7 +248,7 @@
 	value.valueInt = 0;
 
 	// Notify the garbage collector of this object
-	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetTypeIdByDecl("any"));		
+	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetObjectTypeById(engine->GetTypeIdByDecl("any")));
 }
 
 CScriptAny::CScriptAny(void *ref, int refTypeId, asIScriptEngine *engine)
@@ -257,7 +260,7 @@
 	value.valueInt = 0;
 
 	// Notify the garbage collector of this object
-	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetTypeIdByDecl("any"));		
+	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetObjectTypeById(engine->GetTypeIdByDecl("any")));
 
 	Store(ref, refTypeId);
 }
@@ -270,9 +273,10 @@
 void CScriptAny::Store(void *ref, int refTypeId)
 {
 	// Hold on to the object type reference so it isn't destroyed too early
+	asIObjectType *ot = 0;
 	if( *(void**)ref && (refTypeId & asTYPEID_MASK_OBJECT) )
 	{
-		asIObjectType *ot = engine->GetObjectTypeById(refTypeId);
+		ot = engine->GetObjectTypeById(refTypeId);
 		if( ot )
 			ot->AddRef();
 	}
@@ -284,12 +288,12 @@
 	{
 		// We're receiving a reference to the handle, so we need to dereference it
 		value.valueObj = *(void**)ref;
-		engine->AddRefScriptObject(value.valueObj, value.typeId);
+		engine->AddRefScriptObject(value.valueObj, ot);
 	}
 	else if( value.typeId & asTYPEID_MASK_OBJECT )
 	{
 		// Create a copy of the object
-		value.valueObj = engine->CreateScriptObjectCopy(ref, value.typeId);
+		value.valueObj = engine->CreateScriptObjectCopy(ref, ot);
 	}
 	else
 	{
@@ -325,7 +329,7 @@
 		if( (value.typeId & asTYPEID_MASK_OBJECT) &&
 			engine->IsHandleCompatibleWithObject(value.valueObj, value.typeId, refTypeId) )
 		{
-			engine->AddRefScriptObject(value.valueObj, value.typeId);
+			engine->AddRefScriptObject(value.valueObj, engine->GetObjectTypeById(value.typeId));
 			*(void**)ref = value.valueObj;
 
 			return true;
@@ -338,7 +342,7 @@
 		// Copy the object into the given reference
 		if( value.typeId == refTypeId )
 		{
-			engine->CopyScriptObject(ref, value.valueObj, value.typeId);
+			engine->AssignScriptObject(ref, value.valueObj, engine->GetObjectTypeById(value.typeId));
 
 			return true;
 		}
@@ -391,7 +395,7 @@
 	if( value.typeId & asTYPEID_MASK_OBJECT )
 	{
 		// Let the engine release the object
-		engine->ReleaseScriptObject(value.valueObj, value.typeId);
+		engine->ReleaseScriptObject(value.valueObj, engine->GetObjectTypeById(value.typeId));
 
 		// Release the object type info
 		asIObjectType *ot = engine->GetObjectTypeById(value.typeId);
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptarray/scriptarray.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptarray/scriptarray.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptarray/scriptarray.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptarray/scriptarray.cpp	2016-01-09 01:15:04.363718071 +0300
@@ -4,6 +4,7 @@
 #include <assert.h>
 #include <stdio.h> // sprintf
 
+#define AS_DEPRECATED true
 #include "scriptarray.h"
 
 BEGIN_AS_NAMESPACE
@@ -74,10 +75,9 @@
 			for( asUINT n = 0; n < subtype->GetBehaviourCount(); n++ )
 			{
 				asEBehaviours beh;
-				int funcId = subtype->GetBehaviourByIndex(n, &beh);
 				if( beh != asBEHAVE_CONSTRUCT ) continue;
+				asIScriptFunction *func = subtype->GetBehaviourByIndex(n, &beh);
 
-				asIScriptFunction *func = ot->GetEngine()->GetFunctionById(funcId);
 				if( func->GetParamCount() == 0 )
 				{
 					// Found the default constructor
@@ -93,8 +93,7 @@
 			// Verify that there is a default factory
 			for( asUINT n = 0; n < subtype->GetFactoryCount(); n++ )
 			{
-				int funcId = subtype->GetFactoryIdByIndex(n);
-				asIScriptFunction *func = ot->GetEngine()->GetFunctionById(funcId);
+				asIScriptFunction *func = subtype->GetFactoryByIndex(n);
 				if( func->GetParamCount() == 0 )
 				{
 					// Found the default factory
@@ -233,7 +232,7 @@
 
 	// Notify the GC of the successful creation
 	if( objType->GetFlags() & asOBJ_GC )
-		objType->GetEngine()->NotifyGarbageCollectorOfNewObject(this, objType->GetTypeId());
+		objType->GetEngine()->NotifyGarbageCollectorOfNewObject(this, objType);
 }
 
 CScriptArray::CScriptArray(asUINT length, void *defVal, asIObjectType *ot)
@@ -267,7 +266,7 @@
 
 	// Notify the GC of the successful creation
 	if( objType->GetFlags() & asOBJ_GC )
-		objType->GetEngine()->NotifyGarbageCollectorOfNewObject(this, objType->GetTypeId());
+		objType->GetEngine()->NotifyGarbageCollectorOfNewObject(this, objType);
 
 	// Initialize the elements with the default value
 	for( asUINT n = 0; n < GetSize(); n++ )
@@ -278,7 +277,7 @@
 void CScriptArray::SetValue(asUINT index, void *value)
 {
 	if( (subTypeId & ~asTYPEID_MASK_SEQNBR) && !(subTypeId & asTYPEID_OBJHANDLE) )
-		objType->GetEngine()->CopyScriptObject(At(index), value, subTypeId);
+		objType->GetEngine()->AssignScriptObject(At(index), value, objType->GetEngine()->GetObjectTypeById(subTypeId));
 	else if( subTypeId & asTYPEID_OBJHANDLE )
 	{
 		*(void**)At(index) = *(void**)value;
@@ -523,7 +522,7 @@
 		asIScriptEngine *engine = objType->GetEngine();
 
 		for( ; d < max; d++ )
-			*d = (void*)engine->CreateScriptObject(subTypeId);
+			*d = (void*)engine->CreateScriptObject(engine->GetObjectTypeById(subTypeId));
 	}
 }
 
@@ -581,7 +580,7 @@
 
 		// Execute object opCmp
 		// TODO: Add proper error handling
-		r = ctx->Prepare(cmpFuncId); assert(r >= 0);
+		r = ctx->Prepare(objType->GetEngine()->GetFunctionById(cmpFuncId)); assert(r >= 0);
 		r = ctx->SetObject((void*)a); assert(r >= 0);
 		r = ctx->SetArgAddress(0, (void*)b); assert(r >= 0);
 		r = ctx->Execute();
@@ -641,7 +640,7 @@
 		if( eqFuncId >= 0 )
 		{
 			// TODO: Add proper error handling
-			r = ctx->Prepare(eqFuncId); assert(r >= 0);
+			r = ctx->Prepare(objType->GetEngine()->GetFunctionById(eqFuncId)); assert(r >= 0);
 			r = ctx->SetObject((void*)a); assert(r >= 0);
 			r = ctx->SetArgAddress(0, (void*)b); assert(r >= 0);
 			r = ctx->Execute();
@@ -656,7 +655,7 @@
 		if( cmpFuncId >= 0 )
 		{
 			// TODO: Add proper error handling
-			r = ctx->Prepare(cmpFuncId); assert(r >= 0);
+			r = ctx->Prepare(objType->GetEngine()->GetFunctionById(cmpFuncId)); assert(r >= 0);
 			r = ctx->SetObject((void*)a); assert(r >= 0);
 			r = ctx->SetArgAddress(0, (void*)b); assert(r >= 0);
 			r = ctx->Execute();
@@ -904,7 +903,7 @@
 				void **s   = (void**)src->data;
 
 				for( ; d < max; d++, s++ )
-					engine->CopyScriptObject(*d, *s, subTypeId);
+					engine->AssignScriptObject(*d, *s, engine->GetObjectTypeById(subTypeId));
 			}
 			else
 			{
@@ -948,12 +947,12 @@
 					{
 						if( returnTypeId == asTYPEID_INT32 && strcmp(func->GetName(), "opCmp") == 0 )
 						{
-							cmpFuncId = subType->GetMethodIdByIndex(i);
+							cmpFuncId = subType->GetMethodByIndex(i)->GetId();
 						}
 
 						if( returnTypeId == asTYPEID_BOOL && strcmp(func->GetName(), "opEquals") == 0 )
 						{
-							eqFuncId = subType->GetMethodIdByIndex(i);
+							eqFuncId = subType->GetMethodByIndex(i)->GetId();
 						}
 
 						if( cmpFuncId >= 0 && eqFuncId >= 0 )
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptbuilder/scriptbuilder.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptbuilder/scriptbuilder.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptbuilder/scriptbuilder.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptbuilder/scriptbuilder.cpp	2016-01-09 01:15:04.363718071 +0300
@@ -183,7 +183,7 @@
 	int nested = 0;
 	while( pos < (int)modifiedScript.size() )
 	{
-		int len;
+		AngelScript::asUINT len;
 		asETokenClass t = engine->ParseToken(&modifiedScript[pos], modifiedScript.size() - pos, &len);
 		if( t == asTC_UNKNOWN && modifiedScript[pos] == '#' )
 		{
@@ -252,7 +252,7 @@
 	pos = 0;
 	while( pos < (int)modifiedScript.size() )
 	{
-		int len;
+		AngelScript::asUINT len;
 		asETokenClass t = engine->ParseToken(&modifiedScript[pos], modifiedScript.size() - pos, &len);
 		if( t == asTC_COMMENT || t == asTC_WHITESPACE )
 		{
@@ -433,7 +433,7 @@
 		else if( decl->type == 2 )
 		{
 			// Find the function id
-			int funcId = module->GetFunctionIdByDecl(decl->declaration.c_str());
+			int funcId = module->GetFunctionByDecl(decl->declaration.c_str())->GetId();
 			if( funcId >= 0 )
 				funcMetadataMap.insert(map<int, string>::value_type(funcId, decl->metadata));
 		}
@@ -486,7 +486,7 @@
 
 int CScriptBuilder::SkipStatement(int pos)
 {
-	int len;
+	AngelScript::asUINT len;
 
 	// Skip until ; or { whichever comes first
 	while( pos < (int)modifiedScript.length() && modifiedScript[pos] != ';' && modifiedScript[pos] != '{' )
@@ -525,7 +525,7 @@
 // Overwrite all code with blanks until the matching #endif
 int CScriptBuilder::ExcludeCode(int pos)
 {
-	int len;
+	AngelScript::asUINT len;
 	int nested = 0;
 	while( pos < (int)modifiedScript.size() )
 	{
@@ -588,7 +588,7 @@
 	pos += 1;
 
 	int level = 1;
-	int len;
+	AngelScript::asUINT len;
 	while( level > 0 && pos < (int)modifiedScript.size() )
 	{
 		asETokenClass t = engine->ParseToken(&modifiedScript[pos], modifiedScript.size() - pos, &len);
@@ -622,7 +622,7 @@
 	int start = pos;
 
 	std::string token;
-	int len = 0;
+	AngelScript::asUINT len = 0;
 	asETokenClass t = asTC_WHITESPACE;
 
 	// Skip white spaces and comments
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptdictionary/scriptdictionary.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptdictionary/scriptdictionary.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scriptdictionary/scriptdictionary.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scriptdictionary/scriptdictionary.cpp	2016-01-09 01:15:04.363718071 +0300
@@ -1,5 +1,7 @@
 #include <assert.h>
 #include <string.h>
+
+#define AS_DEPRECATED true
 #include "scriptdictionary.h"
 
 BEGIN_AS_NAMESPACE
@@ -21,7 +23,7 @@
 
 	// Notify the garbage collector of this object
 	// TODO: The type id should be cached
-	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetTypeIdByDecl("dictionary"));
+	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetObjectTypeById(engine->GetTypeIdByDecl("dictionary")));
 }
 
 CScriptDictionary::~CScriptDictionary()
@@ -105,12 +107,12 @@
 	{
 		// We're receiving a reference to the handle, so we need to dereference it
 		valStruct.valueObj = *(void**)value;
-		engine->AddRefScriptObject(valStruct.valueObj, typeId);
+		engine->AddRefScriptObject(valStruct.valueObj, engine->GetObjectTypeById(typeId));
 	}
 	else if( typeId & asTYPEID_MASK_OBJECT )
 	{
 		// Create a copy of the object
-		valStruct.valueObj = engine->CreateScriptObjectCopy(value, typeId);
+		valStruct.valueObj = engine->CreateScriptObjectCopy(value, engine->GetObjectTypeById(typeId));
 	}
 	else
 	{
@@ -169,7 +171,7 @@
 			if( (it->second.typeId & asTYPEID_MASK_OBJECT) &&
 				engine->IsHandleCompatibleWithObject(it->second.valueObj, it->second.typeId, typeId) )
 			{
-				engine->AddRefScriptObject(it->second.valueObj, it->second.typeId);
+				engine->AddRefScriptObject(it->second.valueObj, engine->GetObjectTypeById(it->second.typeId));
 				*(void**)value = it->second.valueObj;
 
 				return true;
@@ -185,7 +187,7 @@
 			// Copy the object into the given reference
 			if( isCompatible )
 			{
-				engine->CopyScriptObject(value, it->second.valueObj, typeId);
+				engine->AssignScriptObject(value, it->second.valueObj, engine->GetObjectTypeById(typeId));
 
 				return true;
 			}
@@ -271,7 +273,7 @@
 	if( value.typeId & asTYPEID_MASK_OBJECT )
 	{
 		// Let the engine release the object
-		engine->ReleaseScriptObject(value.valueObj, value.typeId);
+		engine->ReleaseScriptObject(value.valueObj, engine->GetObjectTypeById(value.typeId));
 		value.valueObj = 0;
 		value.typeId = 0;
 	}
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scripthandle/scripthandle.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scripthandle/scripthandle.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scripthandle/scripthandle.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scripthandle/scripthandle.cpp	2016-01-09 01:15:04.363718071 +0300
@@ -1,8 +1,10 @@
-#include "scripthandle.h"
 #include <new>
 #include <assert.h>
 #include <string.h>
 
+#define AS_DEPRECATED true
+#include "scripthandle.h"
+
 BEGIN_AS_NAMESPACE
 
 static void Construct(CScriptHandle *self) { new(self) CScriptHandle(); }
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scripthelper/scripthelper.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scripthelper/scripthelper.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/scripthelper/scripthelper.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/scripthelper/scripthelper.cpp	2016-01-09 01:15:04.364718061 +0300
@@ -1,9 +1,11 @@
 #include <string.h>
-#include "scripthelper.h"
 #include <string>
 #include <assert.h>
 #include <stdio.h>
 
+#define AS_DEPRECATED true
+#include "scripthelper.h"
+
 using namespace std;
 
 BEGIN_AS_NAMESPACE
@@ -14,7 +16,7 @@
     //       then the method id and context should be cached between calls.
 
 	int retval = -1;
-	int funcId = 0;
+	asIScriptFunction * func = 0;
 
 	asIObjectType *ot = engine->GetObjectTypeById(typeId);
 	if( ot )
@@ -35,17 +37,17 @@
 					break;
 
 				// Found the method
-				funcId = ot->GetMethodIdByIndex(n);
+				func = ot->GetMethodByIndex(n);
 				break;
 			}
 		}
 	}
 
-	if( funcId )
+	if( func )
 	{
 		// Call the method
 		asIScriptContext *ctx = engine->CreateContext();
-		ctx->Prepare(funcId);
+		ctx->Prepare(func);
 		ctx->SetObject(lobj);
 		ctx->SetArgAddress(0, robj);
 		int r = ctx->Execute();
@@ -68,7 +70,7 @@
 	//       entry in a set, then the method id and context should be cached between calls.
 
 	int retval = -1;
-	int funcId = 0;
+	asIScriptFunction * func = 0;
 
 	asIObjectType *ot = engine->GetObjectTypeById(typeId);
 	if( ot )
@@ -89,17 +91,17 @@
 					break;
 
 				// Found the method
-				funcId = ot->GetMethodIdByIndex(n);
+				func = ot->GetMethodByIndex(n);
 				break;
 			}
 		}
 	}
 
-	if( funcId )
+	if( func )
 	{
 		// Call the method
 		asIScriptContext *ctx = engine->CreateContext();
-		ctx->Prepare(funcId);
+		ctx->Prepare(func);
 		ctx->SetObject(lobj);
 		ctx->SetArgAddress(0, robj);
 		int r = ctx->Execute();
@@ -142,7 +144,7 @@
 
 	// If no context was provided, request a new one from the engine
 	asIScriptContext *execCtx = ctx ? ctx : engine->CreateContext();
-	r = execCtx->Prepare(func->GetId());
+	r = execCtx->Prepare(func);
 	if( r < 0 )
 	{
 		func->Release();
@@ -253,13 +255,13 @@
 			asUINT m;
 			for( m = 0; m < type->GetFactoryCount(); m++ )
 			{
-				asIScriptFunction *func = engine->GetFunctionById(type->GetFactoryIdByIndex(m));
+				asIScriptFunction *func = type->GetFactoryByIndex(m);
 				fprintf(f, "objbeh \"%s\" %d \"%s\"\n", typeDecl.c_str(), asBEHAVE_FACTORY, func->GetDeclaration(false));
 			}
 			for( m = 0; m < type->GetBehaviourCount(); m++ )
 			{
 				asEBehaviours beh;
-				asIScriptFunction *func = engine->GetFunctionById(type->GetBehaviourByIndex(m, &beh));
+				asIScriptFunction *func = type->GetBehaviourByIndex(m, &beh);
 				fprintf(f, "objbeh \"%s\" %d \"%s\"\n", typeDecl.c_str(), beh, func->GetDeclaration(false));
 			}
 			for( m = 0; m < type->GetMethodCount(); m++ )
@@ -280,7 +282,7 @@
 	c = engine->GetGlobalFunctionCount();
 	for( n = 0; n < c; n++ )
 	{
-		asIScriptFunction *func = engine->GetFunctionById(engine->GetGlobalFunctionIdByIndex(n));
+		asIScriptFunction *func = engine->GetGlobalFunctionByIndex(n);
 		fprintf(f, "func \"%s\"\n", func->GetDeclaration());
 	}
 
@@ -293,7 +295,7 @@
 		const char *name;
 		int typeId;
 		bool isConst;
-		engine->GetGlobalPropertyByIndex(n, &name, &typeId, &isConst);
+		engine->GetGlobalPropertyByIndex(n, &name, 0, &typeId, &isConst, 0, 0, 0);
 		fprintf(f, "prop \"%s%s %s\"\n", isConst ? "const " : "", engine->GetTypeDeclaration(typeId), name);
 	}
 
@@ -321,9 +323,7 @@
 {
 	if( ctx->GetState() != asEXECUTION_EXCEPTION ) return;
 
-	asIScriptEngine *engine = ctx->GetEngine();
-	int funcId = ctx->GetExceptionFunction();
-	const asIScriptFunction *function = engine->GetFunctionById(funcId);
+	const asIScriptFunction *function = ctx->GetExceptionFunction();
 	printf("func: %s\n", function->GetDeclaration());
 	printf("modl: %s\n", function->GetModuleName());
 	printf("sect: %s\n", function->GetScriptSectionName());
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/serializer/serializer.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/serializer/serializer.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/angelscript_addons/serializer/serializer.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/angelscript_addons/serializer/serializer.cpp	2016-01-09 01:15:04.364718061 +0300
@@ -9,6 +9,8 @@
 #include <assert.h>
 #include <string.h> // strstr
 #include <stdio.h>  // sprintf
+
+#define AS_DEPRECATED true
 #include "serializer.h"
 
 using namespace std;
@@ -57,7 +59,7 @@
 	{
 		const char *name;
 		int typeId;
-		mod->GetGlobalVar(i, &name, &typeId);
+		mod->GetGlobalVar(i, &name, 0, &typeId);
 		m_root.m_children.push_back(new CSerializedValue(&m_root, name, mod->GetAddressOfGlobalVar(i), typeId));
 	}
 
@@ -85,7 +87,7 @@
 	{
 		const char *name;
 		int typeId;
-		mod->GetGlobalVar(i, &name, &typeId);
+		mod->GetGlobalVar(i, &name, 0, &typeId);
 
 		CSerializedValue *v = m_root.FindByName(name);
 		if( v )
@@ -146,7 +148,7 @@
 	// then it is necessary to release the handle here, so we won't get a memory leak
 	if( (m_typeId & asTYPEID_OBJHANDLE) && m_children.size() == 1 && m_children[0]->m_restorePtr )
 	{
-		m_serializer->m_engine->ReleaseScriptObject(m_children[0]->m_restorePtr, m_children[0]->m_typeId);
+		m_serializer->m_engine->ReleaseScriptObject(m_children[0]->m_restorePtr, m_children[0]->GetType());
 	}
 
 	for( size_t n = 0; n < m_children.size(); n++ )
@@ -301,7 +303,7 @@
 		{
 			asIObjectType *type = m_children[0]->GetType();
 
-			void *newObject = m_serializer->m_engine->CreateScriptObject(type->GetTypeId());
+			void *newObject = m_serializer->m_engine->CreateScriptObject(type);
 
 			m_children[0]->Restore(newObject, type->GetTypeId());	
 		}
@@ -394,13 +396,13 @@
 			{
 				// If the handle is already pointing to something it must be released first
 				if( *(void**)m_restorePtr )
-					m_serializer->m_engine->ReleaseScriptObject(*(void**)m_restorePtr, m_typeId);
+					m_serializer->m_engine->ReleaseScriptObject(*(void**)m_restorePtr, m_serializer->m_engine->GetObjectTypeById(m_typeId));
 
 				// Update the internal pointer
 				*(void**)m_restorePtr = handleTo->m_restorePtr;
 
 				// Increase the reference
-				m_serializer->m_engine->AddRefScriptObject(handleTo->m_restorePtr, m_typeId);
+				m_serializer->m_engine->AddRefScriptObject(handleTo->m_restorePtr, m_serializer->m_engine->GetObjectTypeById(m_typeId));
 			}
 		}
 		else
@@ -408,7 +410,7 @@
 			// If the handle is pointing to something, we must release it to restore the null pointer
 			if( m_restorePtr && *(void**)m_restorePtr )
 			{
-				m_serializer->m_engine->ReleaseScriptObject(*(void**)m_restorePtr, m_typeId);
+				m_serializer->m_engine->ReleaseScriptObject(*(void**)m_restorePtr, m_serializer->m_engine->GetObjectTypeById(m_typeId));
 				*(void**)m_restorePtr = 0;
 			}
 		}
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/GameScript.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/GameScript.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/GameScript.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/GameScript.cpp	2016-01-09 13:03:21.833967605 +0300
@@ -333,14 +333,14 @@
 		return;
 	}
 	if (!mod) return;
-	int functionPtr = mod->GetFunctionIdByName(eventhandler.c_str());
+	AngelScript::asIScriptFunction * functionPtr = mod->GetFunctionByName(eventhandler.c_str());
 
 	// trying to create the new object
 	SceneNode *bakeNode = gEnv->sceneManager->getRootSceneNode()->createChildSceneNode();
 	if (gEnv->terrainManager && gEnv->terrainManager->getObjectManager())
 	{
 		const String type = "";
-		gEnv->terrainManager->getObjectManager()->loadObject(objectName, pos, rot, bakeNode, instanceName, type, true, functionPtr, uniquifyMaterials);
+		gEnv->terrainManager->getObjectManager()->loadObject(objectName, pos, rot, bakeNode, instanceName, type, true, functionPtr->GetId(), uniquifyMaterials);
 	}
 }
 
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/LocalStorage.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/LocalStorage.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/LocalStorage.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/LocalStorage.cpp	2016-01-09 13:09:07.810488624 +0300
@@ -30,9 +30,9 @@
 	refCount++;
 	cgflag=false;
 	this->engine = engine_in;
-	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetTypeIdByDecl("LocalStorage"));
+	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetObjectTypeById(engine->GetTypeIdByDecl("LocalStorage")));
 
-	// inversed logic, better use a whiteliste instead of a blacklist, so you are on the safe side ;) - tdev
+	// inversed logic, better use a white list instead of a blacklist, so you are on the safe side ;) - tdev
 	std::string allowedChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-";
 	for (std::string::iterator it = fileName_in.begin() ; it < fileName_in.end() ; ++it){
 		if ( allowedChars.find(*it) == std::string::npos )
@@ -53,7 +53,7 @@
 	this->engine = engine_in;
 	refCount++;
 
-	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetTypeIdByDecl("LocalStorage"));	
+	engine->NotifyGarbageCollectorOfNewObject(this, engine->GetObjectTypeById(engine->GetTypeIdByDecl("LocalStorage")));
 	saved = true;
 }
 
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/OgreAngelscript.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/OgreAngelscript.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/OgreAngelscript.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/OgreAngelscript.cpp	2016-01-09 13:10:02.659989036 +0300
@@ -17,6 +17,7 @@
 You should have received a copy of the GNU General Public License
 along with Rigs of Rods.  If not, see <http://www.gnu.org/licenses/>.
 */
+#define AS_DEPRECATED true
 // created on 31th of July 2009 by Thomas Fischer
 #include "OgreAngelscript.h"
 
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/ScriptEngine.cpp rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/ScriptEngine.cpp
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/ScriptEngine.cpp	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/ScriptEngine.cpp	2016-01-09 13:56:43.186077148 +0300
@@ -75,7 +75,7 @@
 	, engine(0)
 	, eventCallbackFunctionPtr(-1)
 	, eventMask(0)
-	, frameStepFunctionPtr(-1)
+	, frameStepFunctionId(-1)
 	, scriptHash()
 	, scriptLog(0)
 	, scriptName()
@@ -120,8 +120,7 @@
 void ScriptEngine::ExceptionCallback(AngelScript::asIScriptContext *ctx, void *param)
 {
 	AngelScript::asIScriptEngine *engine = ctx->GetEngine();
-	int funcID = ctx->GetExceptionFunction();
-	const AngelScript::asIScriptFunction *function = engine->GetFunctionById(funcID);
+	const AngelScript::asIScriptFunction *function = ctx->GetExceptionFunction();
 	SLOG("--- exception ---");
 	SLOG("desc: " + String(ctx->GetExceptionString()));
 	SLOG("func: " + String(function->GetDeclaration()));
@@ -568,10 +567,10 @@
 	}
 
 	// framestep stuff below
-	if (frameStepFunctionPtr<=0) return 1;
+	if (frameStepFunctionId<=0) return 1;
 	if (!engine) return 0;
 	if (!context) context = engine->CreateContext();
-	context->Prepare(frameStepFunctionPtr);
+	context->Prepare(engine->GetFunctionById(frameStepFunctionId));
 
 	// Set the function arguments
 	context->SetArgFloat(0, dt);
@@ -590,8 +589,8 @@
 {
 	if (!engine) return 0;
 	AngelScript::asIScriptModule *mod = engine->GetModule(moduleName, AngelScript::asGM_CREATE_IF_NOT_EXISTS);
-	int functionPtr = mod->GetFunctionIdByDecl("void fireEvent(string, float)"); // TODO: this shouldn't be hard coded --neorej16
-	if (functionPtr<0) return 0;
+	AngelScript::asIScriptFunction *functionPtr = mod->GetFunctionByDecl("void fireEvent(string, float)"); // TODO: this shouldn't be hard coded --neorej16
+	if (!functionPtr) return 0;
 	if (!context) context = engine->CreateContext();
 	context->Prepare(functionPtr);
 
@@ -624,7 +623,7 @@
 		return 0;
 	}
 	if (!context) context = engine->CreateContext();
-	context->Prepare(functionPtr);
+	context->Prepare(engine->GetFunctionById(functionPtr));
 
 	// Set the function arguments
 	std::string *instance_name = new std::string(source->instancename);
@@ -691,27 +690,27 @@
 		int funcId = func->GetId();
 		
 		// compare the id of the newly added function with the special functions
-		if ( funcId == mod->GetFunctionIdByDecl("void frameStep(float)") )
+		if ( funcId == mod->GetFunctionByDecl("void frameStep(float)")->GetId() )
 		{	
-			if (frameStepFunctionPtr < 0) frameStepFunctionPtr = funcId;
+			if (frameStepFunctionId < 0) frameStepFunctionId = funcId;
 			callbacks["frameStep"].push_back(funcId);
 		}
-		else if ( funcId == mod->GetFunctionIdByDecl("void wheelEvents(int, string, string, string)") )
+		else if ( funcId == mod->GetFunctionByDecl("void wheelEvents(int, string, string, string)")->GetId() )
 		{	
 			if (wheelEventFunctionPtr < 0) wheelEventFunctionPtr = funcId;
 			callbacks["wheelEvents"].push_back(funcId);
 		}
-		else if ( funcId == mod->GetFunctionIdByDecl("void eventCallback(int, int)") )
+		else if ( funcId == mod->GetFunctionByDecl("void eventCallback(int, int)")->GetId() )
 		{
 			if (eventCallbackFunctionPtr < 0) eventCallbackFunctionPtr = funcId;
 			callbacks["eventCallback"].push_back(funcId);
 		}
-		else if ( funcId == mod->GetFunctionIdByDecl("void defaultEventCallback(int, string, string, int)") )
+		else if ( funcId == mod->GetFunctionByDecl("void defaultEventCallback(int, string, string, int)")->GetId() )
 		{	
 			if (defaultEventCallbackFunctionPtr < 0) defaultEventCallbackFunctionPtr = funcId;
 			callbacks["defaultEventCallback"].push_back(funcId);
 		}
-		else if ( funcId == mod->GetFunctionIdByDecl("void on_terrain_loading(string lines)") )
+		else if ( funcId == mod->GetFunctionByDecl("void on_terrain_loading(string lines)")->GetId() )
 		{	
 			callbacks["on_terrain_loading"].push_back(funcId);
 		}
@@ -731,7 +730,7 @@
 	AngelScript::asIScriptModule *mod = engine->GetModule(moduleName, AngelScript::asGM_ONLY_IF_EXISTS);
 
 	if (mod == 0) return AngelScript::asNO_FUNCTION;
-	else return mod->GetFunctionIdByDecl(arg.c_str());
+	else return mod->GetFunctionByDecl(arg.c_str())->GetId();
 }
 
 int ScriptEngine::deleteFunction(const String &arg)
@@ -748,11 +747,11 @@
 		return AngelScript::asNO_FUNCTION;
 	}
 
-	int id = mod->GetFunctionIdByDecl(arg.c_str());
-	if ( id > 0 )
+	AngelScript::asIScriptFunction *funcPtr = mod->GetFunctionByDecl(arg.c_str());
+	if ( funcPtr )
 	{
 		// Warning: The function is not destroyed immediately, only when no more references point to it.
-		mod->RemoveFunction(id);
+		mod->RemoveFunction(funcPtr);
 
 		// Since functions can be recursive, we'll call the garbage
 		// collector to make sure the object is really freed
@@ -761,17 +760,17 @@
 		// Check if we removed a "special" function
 		for (std::map< std::string , std::vector<int> >::iterator it=callbacks.begin(); it!=callbacks.end(); it++)
 		{
-			std::vector<int>::iterator key = std::find(it->second.begin(), it->second.end(), id);
-			if ( *key == id )
+			std::vector<int>::iterator key = std::find(it->second.begin(), it->second.end(), funcPtr->GetId());
+			if ( *key == funcPtr->GetId() )
 				it->second.erase(key);
 		}
-		if ( frameStepFunctionPtr == id )
-			frameStepFunctionPtr = -1;
-		if ( wheelEventFunctionPtr == id )
+		if ( frameStepFunctionId == funcPtr->GetId() )
+			frameStepFunctionId = -1;
+		if ( wheelEventFunctionPtr == funcPtr->GetId() )
 			wheelEventFunctionPtr = -1;
-		if ( eventCallbackFunctionPtr == id )
+		if ( eventCallbackFunctionPtr == funcPtr->GetId() )
 			eventCallbackFunctionPtr = -1;
-		if ( defaultEventCallbackFunctionPtr == id )
+		if ( defaultEventCallbackFunctionPtr == funcPtr->GetId() )
 			defaultEventCallbackFunctionPtr = -1;
 	}
 	else
@@ -781,7 +780,7 @@
 		SLOG(tmp);
 	}
 
-	return id;
+	return funcPtr->GetId();
 }
 
 int ScriptEngine::addVariable(const String &arg)
@@ -838,7 +837,7 @@
 	{
 		// script registered for that event, so sent it
 		if (!context) context = engine->CreateContext();
-		context->Prepare(eventCallbackFunctionPtr);
+		context->Prepare(engine->GetFunctionById(eventCallbackFunctionPtr));
 
 		// Set the function arguments
 		context->SetArgDWord(0, eventnum);
@@ -920,24 +919,24 @@
 	}
 
 	// get some other optional functions
-	frameStepFunctionPtr = mod->GetFunctionIdByDecl("void frameStep(float)");
-	if (frameStepFunctionPtr > 0) callbacks["frameStep"].push_back(frameStepFunctionPtr);
+	frameStepFunctionId = mod->GetFunctionByDecl("void frameStep(float)")->GetId();
+	if (frameStepFunctionId > 0) callbacks["frameStep"].push_back(frameStepFunctionId);
 	
-	wheelEventFunctionPtr = mod->GetFunctionIdByDecl("void wheelEvents(int, string, string, string)");
+	wheelEventFunctionPtr = mod->GetFunctionByDecl("void wheelEvents(int, string, string, string)")->GetId();
 	if (wheelEventFunctionPtr > 0) callbacks["wheelEvents"].push_back(wheelEventFunctionPtr);
 
-	eventCallbackFunctionPtr = mod->GetFunctionIdByDecl("void eventCallback(int, int)");
+	eventCallbackFunctionPtr = mod->GetFunctionByDecl("void eventCallback(int, int)")->GetId();
 	if (eventCallbackFunctionPtr > 0) callbacks["eventCallback"].push_back(eventCallbackFunctionPtr);
 
-	defaultEventCallbackFunctionPtr = mod->GetFunctionIdByDecl("void defaultEventCallback(int, string, string, int)");
+	defaultEventCallbackFunctionPtr = mod->GetFunctionByDecl("void defaultEventCallback(int, string, string, int)")->GetId();
 	if (defaultEventCallbackFunctionPtr > 0) callbacks["defaultEventCallback"].push_back(defaultEventCallbackFunctionPtr);
 
-	int cb = mod->GetFunctionIdByDecl("void on_terrain_loading(string lines)");
+	int cb = mod->GetFunctionByDecl("void on_terrain_loading(string lines)")->GetId();
 	if (cb > 0) callbacks["on_terrain_loading"].push_back(cb);
 
 	// Find the function that is to be called.
-	int funcId = mod->GetFunctionIdByDecl("void main()");
-	if ( funcId < 0 )
+	AngelScript::asIScriptFunction *funcPtr = mod->GetFunctionByDecl("void main()");
+	if ( !funcPtr )
 	{
 		// The function couldn't be found. Instruct the script writer to include the
 		// expected function in the script.
@@ -974,7 +973,7 @@
 	// executed. Note, that if you intend to execute the same function several
 	// times, it might be a good idea to store the function id returned by
 	// GetFunctionIDByDecl(), so that this relatively slow call can be skipped.
-	result = context->Prepare(funcId);
+	result = context->Prepare(funcPtr);
 	if (result < 0)
 	{
 		SLOG("Failed to prepare the context.");
@@ -1001,8 +1000,7 @@
 			SLOG("An exception '" + String(context->GetExceptionString()) + "' occurred. Please correct the code in file '" + scriptName + "' and try again.");
 
 			// Write some information about the script exception
-			int funcID = context->GetExceptionFunction();
-			AngelScript::asIScriptFunction *func = engine->GetFunctionById(funcID);
+			AngelScript::asIScriptFunction *func = context->GetExceptionFunction();
 			SLOG("func: " + String(func->GetDeclaration()));
 			SLOG("modl: " + String(func->GetModuleName()));
 			SLOG("sect: " + String(func->GetScriptSectionName()));
@@ -1037,8 +1035,7 @@
 
 	for (unsigned int i = 0; i < mod->GetFunctionCount(); i++)
 	{
-		int idx = mod->GetFunctionIdByIndex(i);
-		AngelScript::asIScriptFunction *desc = engine->GetFunctionById(idx); //mod->GetFunctionDescriptorById(idx);
+		AngelScript::asIScriptFunction *desc = mod->GetFunctionByIndex(i);
 		result.push_back(String(desc->GetName()));
 		//SLOG(" FUNCTION > " + String(desc->GetName()));
 	}
@@ -1050,7 +1047,7 @@
 		int  typeId = 0;
 		bool isConst = false;
 
-		if (!engine->GetGlobalPropertyByIndex(i, &name, &typeId, &isConst))
+		if (!engine->GetGlobalPropertyByIndex(i, &name, 0, &typeId, &isConst))
 		{
 			result.push_back(String(name));
 			//SLOG(" PROPERTY > " + String(name));
diff -NurEbBH '--exclude=nbproject' '--exclude=Progress' '--exclude=*.fresh-angelscript' '--exclude=*.log' '--exclude=*.includecache' '--exclude=*.internal' '--exclude=*.o' '--exclude=depend.make' rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/ScriptEngine.h rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/ScriptEngine.h
--- rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0.orig/source/main/scripting/ScriptEngine.h	2016-01-06 10:58:02.000000000 +0300
+++ rigs-of-rods-c10f9acd5ccc6147a507ec2baed8f2e564d94bd0/source/main/scripting/ScriptEngine.h	2016-01-09 13:31:36.605146145 +0300
@@ -162,7 +162,7 @@
 	Collisions *coll;
     AngelScript::asIScriptEngine *engine;   //!< instance of the scripting engine
 	AngelScript::asIScriptContext *context; //!< context in which all scripting happens
-	int frameStepFunctionPtr;               //!< script function pointer to the frameStep function
+	int frameStepFunctionId;               //!< script function pointer to the frameStep function
 	int wheelEventFunctionPtr;              //!< script function pointer
 	int eventCallbackFunctionPtr;           //!< script function pointer to the event callback function
 	int defaultEventCallbackFunctionPtr;    //!< script function pointer for spawner events
